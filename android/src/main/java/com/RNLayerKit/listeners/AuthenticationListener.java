package com.RNLayerKit.listeners;

import android.os.AsyncTask;
import android.util.Log;

import com.RNLayerKit.singleton.LayerkitSingleton;
import com.layer.sdk.LayerClient;
import com.layer.sdk.exceptions.LayerException;
import com.layer.sdk.listeners.LayerAuthenticationListener;

import org.json.JSONException;
import org.json.JSONObject;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.URL;
import java.net.URLEncoder;

import javax.net.ssl.HttpsURLConnection;

public class AuthenticationListener implements LayerAuthenticationListener {

    private static final String TAG = AuthenticationListener.class.getSimpleName();

    /**
     * Called after layerClient.authenticate() executes
     * You will need to set up an Authentication Service to take a Layer App ID, User ID, and the
     * nonce to create a Identity Token to pass back to Layer
     * NOTES:
     * - The method will be called when you call "layerClient.authenticate()" or after
     * Authentication
     * when the Identity Token generated by your Web Services expires (you explicitly need to set
     * the expiration date in the Token)
     * - The Nonce returned in this function will expire after 10 minutes, after which you will need
     * to call
     */
    @Override
    public void onAuthenticationChallenge(LayerClient client, String nonce) {

        //Note: This Layer Authentication Service is for TESTING PURPOSES ONLY
        //When going into production, you will need to create your own web service
        //Check out https://developer.layer.com/docs/guides#authentication for guidance

        Log.d(TAG, "On Authentication Challenge");

//        (new AsyncTask<Void, Void, Void>() {
//            @Override
//            protected Void doInBackground(Void... params) {
//                try {
//                    //Log.v("Layer-header", header);
//                    final JSONObject jsonHeader = new JSONObject(header);
//                    HttpPost post = new HttpPost(jsonHeader.get("apiUrl").toString() +
//                            "/layer_auth_token");
//                    post.setHeader("Content-Type", "application/json");
//                    post.setHeader("Accept", jsonHeader.get("accept").toString());
//                    post.setHeader("Client", jsonHeader.get("client").toString());
//                    post.setHeader("access-token", jsonHeader.get("access-token").toString());
//                    post.setHeader("uid", jsonHeader.get("uid").toString());
//
//                    JSONObject json = new JSONObject()
//                            .put("nonce", nonce);
//                    post.setEntity(new StringEntity(json.toString()));
//
//                    HttpResponse response = (new DefaultHttpClient()).execute(post);
//                    // String eit = (new JSONObject(EntityUtils.toString(response.getEntity())))
//                    //         .optString("identity_token");
//                    String eit = EntityUtils.toString(response.getEntity());
//                    eit = eit.substring(1, eit.length() - 1);
//                    //Log.v("LayerResponse", eit);
//
//                    client.answerAuthenticationChallenge(eit);
//
//                } catch (Exception e) {
//                    e.printStackTrace();
//                }
//                return null;
//            }
//        }).execute();

        new AutenticationChallenge(client, nonce).execute();
    }


    private class AutenticationChallenge extends AsyncTask<Void, Void, Void> {

        private LayerClient layerClient;
        private String nonce;

        AutenticationChallenge(LayerClient layerClient, String nonce) {
            this.layerClient = layerClient;
            this.nonce = nonce;
        }

        @Override
        protected Void doInBackground(Void... params) {

            try {

                if (LayerkitSingleton.getInstance().getHeaderGlobal() == null) {
                    Log.e(TAG, "Header is null");
                    return null;
                }

                JSONObject jsonHeader = new JSONObject(LayerkitSingleton.getInstance().getHeaderGlobal());
                String stringURL = String.format("%s%s", jsonHeader.get("apiUrl").toString(), "/layer_auth_token");
                URL url = new URL(stringURL);
                downloadUrl(url);
            } catch (JSONException | IOException ignored) {
            }

            return null;
        }

        /**
         * Given a URL, sets up a connection and gets the HTTP response body from the server.
         * If the network request is successful, it returns the response body in String form. Otherwise,
         * it will throw an IOException.
         */
        private String downloadUrl(URL url) throws IOException {
            InputStream stream = null;
            HttpsURLConnection connection = null;
            String result = null;
            try {
                connection = (HttpsURLConnection) url.openConnection();
                // Timeout for reading InputStream arbitrarily set to 3000ms.
                connection.setReadTimeout(3000);
                // Timeout for connection.connect() arbitrarily set to 3000ms.
                connection.setConnectTimeout(3000);
                // For this use case, set HTTP method to POST.
                connection.setRequestMethod("POST");
                // Already true by default but setting just in case; needs to be true since this request
                // is carrying an input (response) body.
                connection.setDoInput(true);

                try {
                    if (LayerkitSingleton.getInstance().getHeaderGlobal() == null) {
                        Log.e(TAG, "Header is null");
                        return null;
                    }

                    JSONObject jsonHeader = new JSONObject(LayerkitSingleton.getInstance().getHeaderGlobal());

                    connection.setRequestProperty("Content-Type", "application/json");
                    connection.setRequestProperty("Accept", jsonHeader.get("accept").toString());
                    connection.setRequestProperty("Client", jsonHeader.get("client").toString());
                    connection.setRequestProperty("access-token", jsonHeader.get("access-token").toString());
                    connection.setRequestProperty("uid", jsonHeader.get("uid").toString());

                    String charset = "UTF-8";
                    String parameters = "unit_type=" + URLEncoder.encode(nonce, charset);

                    connection.setFixedLengthStreamingMode(parameters.getBytes().length);
                    PrintWriter out = new PrintWriter(connection.getOutputStream());
                    out.print(parameters);
                    out.close();

                } catch (JSONException e) {
                    return null;
                }

                // Open communications link (network traffic occurs here).
                connection.connect();

                int responseCode = connection.getResponseCode();
                if (responseCode != HttpsURLConnection.HTTP_OK) {
                    throw new IOException("HTTP error code: " + responseCode);
                }

                // Retrieve the response body as an InputStream.
                stream = connection.getInputStream();

                if (stream != null) {
                    result = getStringFromInputStream(stream);
                    Log.d(TAG, String.format("result: %s",result));
                    layerClient.answerAuthenticationChallenge(result);
                }

            } finally {
                // Close Stream and disconnect HTTPS connection.
                if (stream != null) {
                    stream.close();
                }
                if (connection != null) {
                    connection.disconnect();
                }
            }
            return result;
        }

        // convert InputStream to String
        private String getStringFromInputStream(InputStream is) {

            BufferedReader bufferedReader = null;
            StringBuilder sb = new StringBuilder();

            String line;
            try {
                bufferedReader = new BufferedReader(new InputStreamReader(is));
                while ((line = bufferedReader.readLine()) != null) {
                    sb.append(line);
                }

            } catch (IOException e) {
                e.printStackTrace();
            } finally {
                if (bufferedReader != null) {
                    try {
                        bufferedReader.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }

            return sb.toString();

        }
    }

    /**
     * Called when the user has successfully authenticated
     */
    @Override
    public void onAuthenticated(LayerClient client, String userID) {
        Log.d(TAG, "On Authenticated");
        //Start the conversation view after a successful authentication
        LayerkitSingleton.getInstance().setUserIdentityGlobal(client.getAuthenticatedUser());
    }

    /**
     * Called when there was a problem authenticating
     * Common causes include a malformed identity token, missing parameters in the identity token,
     * missing or incorrect nonce
     */
    @Override
    public void onAuthenticationError(LayerClient layerClient, LayerException e) {
        Log.d(TAG, "There was an error authenticating: " + e);
        LayerkitSingleton.getInstance().setUserIdentityGlobal(null);
    }

    /**
     * Called after the user has been deauthenticated
     */
    @Override
    public void onDeauthenticated(LayerClient client) {
        Log.d(TAG, "User is deauthenticated.");
        LayerkitSingleton.deleteInstance();
    }
}