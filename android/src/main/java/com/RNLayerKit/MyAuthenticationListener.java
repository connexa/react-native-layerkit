package com.RNLayerKit;

import android.os.AsyncTask;
import android.util.Log;

import com.layer.sdk.LayerClient;
import com.layer.sdk.exceptions.LayerException;
import com.layer.sdk.listeners.LayerAuthenticationListener;

import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.util.EntityUtils;
import org.json.JSONObject;
import org.json.JSONException;

public class MyAuthenticationListener implements LayerAuthenticationListener {

    private static final String TAG = MyAuthenticationListener.class.getSimpleName();

    private RNLayerModule main_activity;

    public MyAuthenticationListener(RNLayerModule ma) {
        main_activity = ma;
    }

    //Called after layerClient.authenticate() executes
    //You will need to set up an Authentication Service to take a Layer App ID, User ID, and the
    //nonce to create a Identity Token to pass back to Layer
    //NOTES:
    // - The method will be called when you call "layerClient.authenticate()" or after
    // Authentication
    //   when the Identity Token generated by your Web Services expires (you explicitly need to set
    //   the expiration date in the Token)
    // - The Nonce returned in this function will expire after 10 minutes, after which you will need
    //   to call
    public void onAuthenticationChallenge(final LayerClient client, final String nonce) {
        final String mUserId = RNLayerModule.userIDGlobal;
        final String header = RNLayerModule.headerGlobal;
        //Log.v("Layer-log:",header);

        //Note: This Layer Authentication Service is for TESTING PURPOSES ONLY
        //When going into production, you will need to create your own web service
        //Check out https://developer.layer.com/docs/guides#authentication for guidance

        // try {
               
        // } catch (JSONException e) {
        //     Log.v("LayerResponse", e.toString());
        //     final JSONObject jsonHeader = new JSONObject();
        //     //some exception handler code.
        // }        
        (new AsyncTask<Void, Void, Void>() {
            @Override
            protected Void doInBackground(Void... params) {
                try {
                    //Log.v("Layer-header", header); 
                    final JSONObject jsonHeader = new JSONObject(header);    
                    HttpPost post = new HttpPost(jsonHeader.get("apiUrl").toString() +
                            "/layer_auth_token");
                    post.setHeader("Content-Type", "application/json");
                    post.setHeader("Accept", jsonHeader.get("accept").toString());
                    post.setHeader("Client", jsonHeader.get("client").toString());
                    post.setHeader("access-token", jsonHeader.get("access-token").toString());
                    post.setHeader("uid", jsonHeader.get("uid").toString());

                    JSONObject json = new JSONObject()
                            .put("nonce", nonce);
                    post.setEntity(new StringEntity(json.toString()));

                    HttpResponse response = (new DefaultHttpClient()).execute(post);
                    // String eit = (new JSONObject(EntityUtils.toString(response.getEntity())))
                    //         .optString("identity_token");
                    String eit = EntityUtils.toString(response.getEntity());
                    eit = eit.substring(1, eit.length()-1);
                    //Log.v("LayerResponse", eit);  

                    client.answerAuthenticationChallenge(eit);

                } catch (Exception e) {
                    e.printStackTrace();
                }
                return null;
            }
        }).execute();
    }

    //Called when the user has successfully authenticated
     public void onAuthenticated(LayerClient client, String userID) {

         //Start the conversation view after a successful authentication
         //Log.v(TAG, "Authentication successful");
         RNLayerModule.userIdentityGlobal = client.getAuthenticatedUser();
         //og.v("User: ", userID );
       
     }

    //Called when there was a problem authenticating
    //Common causes include a malformed identity token, missing parameters in the identity token,
    // missing
    //or incorrect nonce
    public void onAuthenticationError(LayerClient layerClient, LayerException e) {
        Log.v(TAG, "There was an error authenticating: " + e);
    }

    //Called after the user has been deauthenticated
    public void onDeauthenticated(LayerClient client) {
        Log.v(TAG, "User is deauthenticated.");
    }
}